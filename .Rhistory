getwd()
setwd(/Users/joelle/Documents/Data Science/Data bestanden)
setwd(\Users\joelle\Documents\Data Science\Data bestanden)
setwd("Users\joelle\Documents\Data Science\Data bestanden")
setwd("Users/joelle/Documents/Data Science/Data bestanden")
getwd()
setwd("Users/joelle/Documents/Data Science/Data bestanden")
setwd("Users/joelle/Documents/Data Science")
setwd("~/Documents/Data Science/Data bestanden/BADS")
setwd("~/Documents/Data Science/Projecten/R)
setwd("~/Documents/Data Science/Projecten/R")
setwd("Users/Documents/Data Science/Projecten/R")
setwd("Documents/Data Science/Projecten/R")
setwd("~/Documents/Data Science/Projecten/R")
setwd("~/Documents/Data Science/Projecten/R")
setwd("~/Documents/Data Science/Projecten/customer_churn_analysis")
setwd("~/Documents/Data Science/Projecten/customer_churn_analysis")
telecomDataframe <- read.csv(file="WA_Fn-UseC_-Telco-Customer-Churn.csv")
print(str(telecomDataframe))
any(is.na(telecomDataframe))
library(stats)
library(caTools)
library(Amelia)
library(dplyr)
install.packages("Amelia")
library(Amelia)
missmap(telecomDataframe,col=c("yellow","red"))
missmap(telecomDataframe,col=c("red","white"))
View(telecomDataframe)
group_tenure <- function(tenure){
if (tenure >= 0 && tenure <= 6){
return('0-6 Month')
}else if(tenure > 6 && tenure <= 12){
return('6-12 Month')
}else if (tenure > 12 && tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 && tenure <=36){
return('24-36 Month')
}else if (tenure > 36 && tenure <=48){
return('36-48 Month')
}else if (tenure > 48 && tenure <= 62){
return('48-62 Month')
}else if (tenure > 62){
return('> 62 Month')
}
}
telecomDataframe$tenure_interval <- sapply(telecomDataframe$tenure,group_tenure)
telecomDataframe$tenure_interval <- as.factor(telecomDataframe$tenure_interval)
telecomDataframe <- select(telecomDataframe,-customerID,-tenure)
count(telecomDataframe$MultipleLines)
telecomDataframe$MultipleLines <- as.character(telecomDataframe$MultipleLines)
telecomDataframe$OnlineSecurity <- as.character(telecomDataframe$OnlineSecurity)
telecomDataframe$OnlineBackup <- as.character(telecomDataframe$OnlineBackup)
telecomDataframe$DeviceProtection <- as.character(telecomDataframe$DeviceProtection)
telecomDataframe$TechSupport <- as.character(telecomDataframe$TechSupport)
telecomDataframe$StreamingTV <- as.character(telecomDataframe$StreamingTV)
telecomDataframe$StreamingMovies <- as.character(telecomDataframe$StreamingMovies)
count(telecomDataframe$MultipleLines)
telecomDataframe$MultipleLines[telecomDataframe$MultipleLines=="No phone service"] <- "No"
telecomDataframe$OnlineSecurity[telecomDataframe$OnlineSecurity=="No internet service"] <- "No"
telecomDataframe$OnlineBackup[telecomDataframe$OnlineBackup=="No internet service"] <- "No"
telecomDataframe$DeviceProtection[telecomDataframe$DeviceProtection=="No internet service"] <- "No"
telecomDataframe$TechSupport[telecomDataframe$TechSupport=="No internet service"] <- "No"
telecomDataframe$StreamingTV[telecomDataframe$StreamingTV=="No internet service"] <- "No"
telecomDataframe$StreamingMovies[telecomDataframe$StreamingMovies=="No internet service"] <- "No"
telecomDataframe$MultipleLines <- as.factor(telecomDataframe$MultipleLines)
telecomDataframe$OnlineSecurity <- as.factor(telecomDataframe$OnlineSecurity)
telecomDataframe$OnlineBackup <- as.factor(telecomDataframe$OnlineBackup)
telecomDataframe$DeviceProtection <- as.factor(telecomDataframe$DeviceProtection)
telecomDataframe$TechSupport <- as.factor(telecomDataframe$TechSupport)
telecomDataframe$StreamingTV <- as.factor(telecomDataframe$StreamingTV)
telecomDataframe$StreamingMovies <- as.factor(telecomDataframe$StreamingMovies)
telecomDataframe <- na.omit(telecomDataframe)
set.seed(123)
sample <- sample.split(telecomDataframe$Churn,SplitRatio=0.70)
trainData <- subset(telecomDataframe,sample==TRUE)
testData <- subset(telecomDataframe,sample==FALSE)
telecomModel <- glm(Churn ~ .,family=binomial(link="logit"),data=trainData)
print(summary(telecomModel))
test.predictions <- predict(telecomModel,newdata=testData,type="response")
print(summary(test.predictions))
fitted.results <- ifelse(test.predictions > 0.5,1,0)
testData$Churn <- as.character(testData$Churn)
testData$Churn[testData$Churn=="No"] <- "0"
testData$Churn[testData$Churn=="Yes"] <- "1"
misClasificationError <- mean(fitted.results!=testData$Churn)
print(misClasificationError)
accuracyRate <- 1-misClasificationError
print(accuracyRate)
table(testData$Churn,test.predictions > 0.5)
results <- cbind(fitted.results,testData$Churn)
colnames(results) <- c("predicted","actual")
results <- as.data.frame(results)
print(results)
plot(results)
hist(results)
plot(results)
plot.p(results)
plot(results, p)
plot(results, type=p)
plot(results, type="p")
plot(results, type="h")
plot(results, type="b")
plot(results, type="l")
missmap(telecomDataframe,col=c("red","blue"))
